#!/usr/bin / env node

process.env.DEBUG = process.env.DEBUG || 'her:*'

const Her = require('../')
const chokidar = require('chokidar')
const parseArgs = require('minimist')
const debug = require('debug')('her:config')
const chalk = require('chalk')
const fs = require('fs-extra')
const path = require('path')
debug.color = 2
const { resolve } = require('path')
const argv = parseArgs(process.argv.slice(2), {
  alias: {
    c: 'config-file'
  },
  string: ['c'],
  default: {
    c: 'her.config.js'
  }
})

const rootDir = resolve(argv._[0] || '.')
const herConfigFile = resolve(argv['config-file']);

let getConifg = function () {
  let options
  if (fs.existsSync(herConfigFile)) {
    delete require.cache[herConfigFile]
    options = require(herConfigFile)
  } else if (argv['config-file'] !== 'her.config.js') {
    console.error(`> Could not load config file ${argv['config-file']}`)
    process.exit(1)
  }
  if (typeof options.rootDir !== 'tring') {
    options.rootDir = rootDir
  }

  if (typeof options.srcDir !== 'string') {
    options.srcDir = path.join(rootDir, 'src')
  }

  // Force development mode for add hot reloading and watching changes
  options.dev = true

  return options;
}

let needToRestart = false

let startDev = function (oldInstance) {
  let config = getConifg()
  let instance = new Her(config);

  const onError = (err, instance) => {
    debug('Error while reloading [nuxt.config.js]', err)
    return Promise.resolve(instance) // Wait for next reload
  }

  return Promise.resolve()
    .then(() => oldInstance ? oldInstance.stop() : Promise.resolve())
    .then(() => instance.builder.build(!oldInstance))
    .then(() => instance.server.ready())
    .then(() => instance.start(!!!oldInstance))
    .then(() => instance)
    .catch((err) => { onError(err, instance) })
}

let dev = startDev()

chokidar
  .watch([herConfigFile], { ignoreInitial: true })
  .on('all', function () {
    try {
      debug('[her.config.js] changed')
      needToRestart = true
      dev = dev.then((instance) => {
        if (needToRestart === false) return instance
        needToRestart = false

        debug('Rebuilding the app...')
        return startDev(instance)
      })

    } catch (e) {
      console.log('\n' + chalk.bgRed.white(' ERROR ') + '\n')
      console.error(e)
      console.log('\n')
    }
  })
